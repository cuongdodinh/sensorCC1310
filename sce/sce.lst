               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           13
               .define AUXIO_I2C_SDA           12
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  10
               .define I2C_WAIT_STRETCH_DELAY  5
               .alias  i2cTaskName             temperature
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6871                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 786f                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6871                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6873                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c6f                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 186f                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 1497                         jsr         temperature/event0
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skip
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c70                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skip:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               pFwTaskInitializeFuncTable:
0068 ---- 0078                         dw          #temperature/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 007b                         dw          #temperature/execute
               pFwTaskTerminateFuncTable:
006a ---- 00fb                         dw          #temperature/terminate
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
               
               ; External control data, shared with the driver
               fwCtrlExt:
006f ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0070 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0071 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0072 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0073 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: Temperature"
               temperature/cfg:
               temperature/input:
               temperature/output:
               temperature/output/resultHumidityRaw:
0074 ---- 0000                         dw          #0
               temperature/output/resultTemperatureRaw:
0075 ---- 0000                         dw          #0
               temperature/state:
               temperature/state/i2cStatus:
0076 ---- 0000                         dw          #0
               temperature/state/measureStage:
0077 ---- 0000                         dw          #0
               .segment end "Task: Temperature"
               
               
               .segment begin "Task: Temperature"
               temperature/initialize:
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0078 ---- 0001                         ld          R0, #1
0079 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               temperature/initializeDone:
007a ---- adb7                         rts         
               
               
               
               
               temperature/execute:
               ;? // Configure and start the next measurement
               ;? if (state.measureStage == 0){
007b ---- 0877                         ld          R0, [#temperature/state/measureStage]
007c ---- 8a00                         cmp         R0, #0
007d ---- be16                         bneq        /id0039
               ;?     i2cStart();
007e ---- 6000                             ld          R6, #0x0000
007f ---- 1504                             jsr         I2cStart
0080 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;? 
               ;?     i2cTx(I2C_OP_WRITE | SHT21_IC_ADDR);
0081 ---- 7080                             ld          R7, #128
0082 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
0083 ---- 151b                             jsr         I2cTxByte
0084 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     i2cTx(TRIG_T_MEASUREMENT);
0085 ---- 70f3                             ld          R7, #243
0086 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
0087 ---- 151b                             jsr         I2cTxByte
0088 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;? 
               ;?     i2cStop();
0089 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
008a ---- 1539                             jsr         I2cStop
008b ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;? 
               ;?     evhSetupTimerTrigger(0, 100, 2);
008c ---- 0064                             ld          R0, #100
008d ---- 8b0d                             out         R0, [#IOP_TIMER_T1TARGET]
008e 8608 7022                             ld          R7, #(((2 << IOB_TIMER_TXCFG_PRE) | TIMER_TXCFG_TICK_SRC_RTC_4KHZ) | BV_TIMER_TXCFG_MODE_TICK)
0090 ---- fb0a                             out         R7, [#IOP_TIMER_T1CFG]
0091 ---- 7025                             ld          R7, #(BV_EVCTL_VECCFG1_VEC2_EN | (EVCTL_VECEVSEL_TIMER1_EV << IOB_EVCTL_VECCFG1_VEC2_EV))
0092 ---- 1544                             jsr         EvhSetupTrigger
0093 ---- 6444                             iobset      #0, [#IOP_TIMER_T1CTL]
               ;? }
               /id0039:
               ;? 
               ;? fwScheduleTask(1);
0094 ---- 0001                         ld          R0, #1
0095 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               temperature/executeDone:
0096 ---- adb7                         rts         
               
               
               
               
               temperature/event0:
               ;? if (state.measureStage == 0) {
0097 ---- 0877                         ld          R0, [#temperature/state/measureStage]
0098 ---- 8a00                         cmp         R0, #0
0099 ---- be39                         bneq        /id0062
               ;?     i2cStart();
009a ---- 6000                             ld          R6, #0x0000
009b ---- 1504                             jsr         I2cStart
009c ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | SHT21_IC_ADDR);
009d ---- 7081                             ld          R7, #129
009e ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
009f ---- 151b                             jsr         I2cTxByte
00a0 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     if (state.i2cStatus == 0x0000) {
00a1 ---- 0876                             ld          R0, [#temperature/state/i2cStatus]
00a2 ---- 8a00                             cmp         R0, #0
00a3 ---- be13                             bneq        /id0071
               ;?         U16 resultH;
               ;?         U16 resultL;
               ;?         U16 CRC;
               ;?         
               ;?         i2cRxAck(resultH);
00a4 ---- 7000                                 ld          R7, #0x0000
00a5 ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00a6 ---- 154a                                 jsr         I2cRxByte
00a7 ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
00a8 ---- 8d47                                 ld          R0, R7
               ;?         i2cRxAck(resultL);
00a9 ---- 7000                                 ld          R7, #0x0000
00aa ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00ab ---- 154a                                 jsr         I2cRxByte
00ac ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
00ad ---- 9d47                                 ld          R1, R7
               ;?         i2cRxNack(CRC);
00ae ---- 7001                                 ld          R7, #0x0001
00af ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00b0 ---- 154a                                 jsr         I2cRxByte
00b1 ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
               ;?         
               ;?         resultL = resultL & (~0x03);
00b2 86ff 90fc                                 and         R1, #65532
               ;?         
               ;?         output.resultTemperatureRaw = (resultH << 8) | resultL;
00b4 ---- 8da0                                 lsl         R0, #8
00b5 ---- 8d09                                 or          R0, R1
00b6 ---- 0c75                                 st          R0, [#temperature/output/resultTemperatureRaw]
               ;?     }
               /id0071:
               ;?     i2cStop();
00b7 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00b8 ---- 1539                             jsr         I2cStop
00b9 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     //trigger read Humidity
               ;?     state.measureStage = 1;
00ba ---- 0001                             ld          R0, #1
00bb ---- 0c77                             st          R0, [#temperature/state/measureStage]
               ;?     
               ;?     i2cStart();
00bc ---- 6000                             ld          R6, #0x0000
00bd ---- 1504                             jsr         I2cStart
00be ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     i2cTx(I2C_OP_WRITE | SHT21_IC_ADDR);
00bf ---- 7080                             ld          R7, #128
00c0 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00c1 ---- 151b                             jsr         I2cTxByte
00c2 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     i2cTx(TRIG_RH_MEASUREMENT);
00c3 ---- 70f5                             ld          R7, #245
00c4 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00c5 ---- 151b                             jsr         I2cTxByte
00c6 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     i2cStop();
00c7 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00c8 ---- 1539                             jsr         I2cStop
00c9 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     evhSetupTimerTrigger(0, 100, 2);
00ca ---- 0064                             ld          R0, #100
00cb ---- 8b0d                             out         R0, [#IOP_TIMER_T1TARGET]
00cc 8608 7022                             ld          R7, #(((2 << IOB_TIMER_TXCFG_PRE) | TIMER_TXCFG_TICK_SRC_RTC_4KHZ) | BV_TIMER_TXCFG_MODE_TICK)
00ce ---- fb0a                             out         R7, [#IOP_TIMER_T1CFG]
00cf ---- 7025                             ld          R7, #(BV_EVCTL_VECCFG1_VEC2_EN | (EVCTL_VECEVSEL_TIMER1_EV << IOB_EVCTL_VECCFG1_VEC2_EV))
00d0 ---- 1544                             jsr         EvhSetupTrigger
00d1 ---- 6444                             iobset      #0, [#IOP_TIMER_T1CTL]
               ;?     
               ;? } else {
00d2 ---- 04fa                         jmp         /id0064
               /id0062:
               ;?     
               ;?     i2cStart();
00d3 ---- 6000                             ld          R6, #0x0000
00d4 ---- 1504                             jsr         I2cStart
00d5 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | SHT21_IC_ADDR);
00d6 ---- 7081                             ld          R7, #129
00d7 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00d8 ---- 151b                             jsr         I2cTxByte
00d9 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     if (state.i2cStatus == 0x0000) {
00da ---- 0876                             ld          R0, [#temperature/state/i2cStatus]
00db ---- 8a00                             cmp         R0, #0
00dc ---- be13                             bneq        /id0108
               ;?         U16 resultH;
               ;?         U16 resultL;
               ;?         U16 CRC;
               ;?         
               ;?         i2cRxAck(resultH);
00dd ---- 7000                                 ld          R7, #0x0000
00de ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00df ---- 154a                                 jsr         I2cRxByte
00e0 ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
00e1 ---- 8d47                                 ld          R0, R7
               ;?         i2cRxAck(resultL);
00e2 ---- 7000                                 ld          R7, #0x0000
00e3 ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00e4 ---- 154a                                 jsr         I2cRxByte
00e5 ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
00e6 ---- 9d47                                 ld          R1, R7
               ;?         i2cRxNack(CRC);
00e7 ---- 7001                                 ld          R7, #0x0001
00e8 ---- 6876                                 ld          R6, [#temperature/state/i2cStatus]
00e9 ---- 154a                                 jsr         I2cRxByte
00ea ---- 6c76                                 st          R6, [#temperature/state/i2cStatus]
               ;?         
               ;?         resultL = resultL & (~0x03);
00eb 86ff 90fc                                 and         R1, #65532
               ;?         
               ;?         output.resultHumidityRaw = (resultH << 8) | resultL;
00ed ---- 8da0                                 lsl         R0, #8
00ee ---- 8d09                                 or          R0, R1
00ef ---- 0c74                                 st          R0, [#temperature/output/resultHumidityRaw]
               ;?     }
               /id0108:
               ;?     i2cStop();
00f0 ---- 6876                             ld          R6, [#temperature/state/i2cStatus]
00f1 ---- 1539                             jsr         I2cStop
00f2 ---- 6c76                             st          R6, [#temperature/state/i2cStatus]
               ;?     
               ;?     //return back to read temp
               ;?     state.measureStage = 0;
00f3 ---- 0000                             ld          R0, #0
00f4 ---- 0c77                             st          R0, [#temperature/state/measureStage]
               ;?     
               ;?     fwGenAlertInterrupt();
00f5 ---- 086c                             ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00f6 ---- 8201                             or          R0, #(1 << 0)
00f7 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?     
               ;?     fwScheduleTask(1);
00f8 ---- 0001                             ld          R0, #1
00f9 ---- 0c67                             st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               ;? }
               /id0064:
               temperature/event0Done:
00fa ---- adb7                         rts         
               
               
               
               
               temperature/terminate:
               ;? evhCancelTrigger(0);
00fb ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
00fc ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               temperature/terminateDone:
00fd ---- adb7                         rts         
               .segment end "Task: Temperature"
               
               
               .segment begin "Procedure Libary"
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
00fe ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
00ff ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0100 ---- 750f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0101 ---- 150c                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STA
0102 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0103 ---- 1509                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
0104 ---- 540f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_HD_STA
0105 ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
0106 ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
0107 ---- 550f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Done
0108 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
0109 ---- d802 /waitLoop:                  add         R5, #2
010a ---- defe                         bneg        /waitLoop
               
                                       ; Done
010b ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
010c ---- 53f6                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
010d ---- 3513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
010e ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
010f ---- 3513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0110 ---- ae09                             biob1       /done
0111 ---- 3513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0112 ---- ae07                             biob1       /done
0113 ---- 3513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0114 ---- ae05                             biob1       /done
0115 ---- 3513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
0116 ---- ae03                             biob1       /done
               
0117 ---- d801                         add         R5, #1;
0118 ---- bef4                         bnz         /waitLoop
               
               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
0119 ---- e202                         or          R6, #0x0002
               
               /done:                  ; Done
011a ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
011b ---- ea00                         cmp         R6, #0
011c ---- be1b                         bnz         /done
               
               
                                       ; Transmit each bit in the data byte ...
011d ---- b50e                         loop        #8, /byteLoopEnd
               
                                           ; Output the bit to SDA
011e ---- fda1                             lsl         R7, #1
011f 8601 fc00                             tst         R7, #0x0100
0121 ---- b602                             bz          /dataSdaLow
0122 ---- 740f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0123 ---- 8e02                             bra         /dataSdaDone
0124 ---- 540f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0125 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
0126 ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
0127 ---- 1509                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
0128 ---- 750f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
0129 ---- 150c                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
012a ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
012b ---- 1509                             jsr         I2cWaitDelay
               
                                           ; SCL = driven low
012c ---- 550f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Receive the ACK bit
                                       ; SDA = pull-up
012d ---- 740f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
012e ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
012f ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0130 ---- 750f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0131 ---- 150c                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
0132 ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
0133 ---- 1509                         jsr         I2cWaitDelay
               
                                       ; Read and store the SDA value in the status word
0134 ---- 3413                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0135 ---- a601                         biob0       /ackSdaLow
0136 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
0137 ---- 550f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
               
               /done:                  ; Done
0138 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
0139 ---- 540f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
013a ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
013b ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
013c ---- 750f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
013d ---- 150c                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STO
013e ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
013f ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SDA = pull-up
0140 ---- 740f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_BUF
0141 ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
0142 ---- 1509                         jsr         I2cWaitDelay
               
                                       ; Done
0143 ---- adb7                         rts
               
               
               
               
               EvhSetupTrigger:
                                       ; Disable and clear the vector flag
0144 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0145 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Configure and enable the vector flag (+ fixed configuration for channel 3)
0146 862b f200                         or          R7, #(BV_EVCTL_VECCFG1_VEC3_EN | (EVCTL_VECEVSEL_AON_SW << IOB_EVCTL_VECCFG1_VEC3_EV))
0148 ---- fb27                         out         R7, [#IOP_EVCTL_VECCFG1]
0149 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
014a ---- ea00                         cmp         R6, #0
014b ---- be1c                         bnz         /done
               
               
                                       ; Receive each bit in the data byte ...
014c ---- b50b                         loop        #8, /byteLoopEnd
               
                                           ; SDA = pull-up
014d ---- 740f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                           ; Wait T_LOW
014e ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
014f ---- 1509                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
0150 ---- 750f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
0151 ---- 150c                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
0152 ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
0153 ---- 1509                             jsr         I2cWaitDelay
               
                                           ; Read and store SDA
0154 ---- fda1                             lsl         R7, #1
0155 ---- 3413                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0156 ---- a601                             biob0       /dataSdaLow
0157 ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
0158 ---- 550f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
0159 8601 fc00                         tst         R7, #0x0100
015b ---- b602                         bz          /ackSdaLow
015c ---- 740f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
015d ---- 8e02                         bra         /ackSdaDone
015e ---- 540f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
015f ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
0160 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
0161 ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
0162 ---- 750f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
0163 ---- 150c                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
0164 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0165 ---- 1509                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
0166 ---- 550f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Mask the ACK bit in the received data
0167 ---- f0ff                         and         R7, #0xFF
               
               
               /done:                  ; Done
0168 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by PSILON-VAIO at 2017-05-22 12:56:46.374
